{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/sd-random.js","standalone.index.js"],"names":["f","exports","module","define","amd","g","window","global","self","this","SilverDecisions","Random","r","e","n","t","o","i","c","require","u","a","Error","code","p","call","length","1","b","NaN","Math","random","beta","log","alpha","minimum","pow","k","m","mult","sqrt","d","p1","p2","mean","std","exp","Normal","sum","Bernoulli","floor","lambda","_u","_x","_u2","E","_u3","ainv","bbb","ccc","u1","u2","v","x","z","cos","PI","_sdRandom","Object","keys","forEach","key","defineProperty","enumerable","get"],"mappings":"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","file":"sd-random.min.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","export const menuList = [\"Uniform(0.0,1.0)\", \"Exponential(1.0)\",\r\n                         \"Normal(0.0,1.0)\", \"Pareto(1.0,1.0)\",\r\n                         \"Weibull(1.0,1.0)\", \"Triangular(0.0,1.0,0.5)\",\r\n                         \"Trapezoidal(0.0,1.0,0.25,0.75)\",\r\n                         \"LogNormal(0.0,1.0)\", \"Gamma(1.0,1.0)\",\r\n                         \"Loglogistic(1.0,0.5)\",\"Erlang(4,0.5)\",\r\n                         \"Bernoulli(0.5)\",\"Binomial(2,0.5)\",\r\n                         \"Geometric(0.5)\", \"Poisson(2.0)\"];\r\n\r\nexport const functionNameList = [\"Uniform\", \"Exponential\",\r\n                                 \"Normal\", \"Pareto\",\r\n                                 \"Weibull\", \"Triangular\",\r\n                                 \"Trapezoidal\",\r\n                                 \"LogNormal\", \"Gamma\",\r\n                                 \"Loglogistic\",\"Erlang\",\r\n                                 \"Bernoulli\",\"Binomial\",\r\n                                 \"Geometric\", \"Poisson\"];\r\n\r\n\r\nexport const random = Math.random;\r\n\r\n/**\r\n * Uniform distribution implementation.\r\n * More details at A.Law \"Simulation Modelling and Analysis\", 5e, Mc Graw-Hill, 2015, p. 452\r\n * @param a lower bound\r\n * @param b upper bound, b >= a\r\n * @returns Uniform distributed random value\r\n */\r\nexport function Uniform(a, b) {\r\n    if (a == null) a = 0.0;\r\n    if (b == null) b = 1.0;\r\n\tif (b < a) return NaN;\r\n    return a + (b - a)*Math.random();\r\n}\r\n\r\n/**\r\n * Exponential distribution mplementation based on A.Law \"Simulation Modelling and Analysis\", 5e, Mc Graw-Hill, 2015, p. 452 \r\n * @param beta shape parameter, beta > 0,  lambda = 1/beta. For exponential distribution beta is equal to the mean.\r\n * @returns Exponentially distributed random value\r\n */\r\nexport function Exponential(beta) {\r\n\tif (beta==null) beta == 1;\r\n\tif (beta<=0) return NaN;\t\r\n    return -beta * Math.log(Math.random());\r\n}\r\n\r\n/**\r\n * Normal distribution implementation based on Box and Muller (1958) algorithm\r\n * Please note that in order to not to store state in this library we use only odd values\r\n * For discussion see A.Law \"Simulation Modelling and Analysis\", 5e, Mc Graw-Hill, 2015, p. 457\r\n * @param mean mean value\r\n * @param std standard deviation, std>=0\r\n * @returns Normally distributed random value\r\n */\r\nexport function Normal(mean, std) {\r\n    if (mean == null) mean = 0.0;\r\n    if (std == null) std = 1.0;\r\n    if (std < 0) return NaN;\r\n\r\n    let n = Math.sqrt(-2.0 * Math.log(Math.random())) * Math.cos(2.0 * Math.PI * Math.random());\r\n    return n * std + mean;\r\n}\r\n/**\r\n * Pareto distribution implementation based on \r\n * https://en.wikipedia.org/wiki/Pareto_distribution#Random_sample_generation\r\n * \r\n * @param alpha shape parameter, alpha > 0\r\n * @param minimum scale parameter, minimum > 0\r\n * @returns\r\n */\r\nexport function Pareto(alpha, minimum) {\r\n\tif (alpha == null) alpha = 1.0;\r\n\tif (minimum == null) minimum = 1.0;\r\n\tif (alpha <= 0 || minimum <= 0) return NaN;\r\n    return minimum / Math.pow(Math.random(), 1.0 / alpha);\r\n}\r\n\r\n\r\n/**\r\n * Log-logistic distribution implementation based on A.Law \"Simulation Modelling and Analysis\", 5e, Mc Graw-Hill, 2015, p. 460\r\n * @param alpha shape parameter, alpha > 0\r\n * @param beta scale parameter, beta > 0\r\n * @returns Log-logistic distributed random value\r\n */\r\nexport function Loglogistic(alpha, beta) {\r\n\tif (alpha == null) alpha = 1.0;\r\n\tif (beta == null) beta = 1.0;\r\n\tif (beta <= 0 || alpha <= 0) return NaN;\r\n\tvar u = Math.random();\r\n\treturn beta * Math.pow(u/(1-u), 1/alpha);\t\r\n}\r\n\r\n\r\n/**\r\n * Weibull distribution implementation based on A.Law \"Simulation Modelling and Analysis\", 5e, Mc Graw-Hill, 2015, p. 456\r\n * @param alpha shape parameter, alpha > 0\r\n * @param beta scale parameter, beta > 0\r\n * @returns Weibull distributed random value\r\n */\r\nexport function Weibull(alpha, beta) {\r\n\tif (alpha == null) alpha = 1.0;\r\n\tif (beta == null) beta = 1.0;\r\n\tif (beta <= 0 || alpha <= 0) return NaN;\t\r\n    return beta * Math.pow(-Math.log(1.0 - Math.random()), 1.0 / alpha);\r\n}\r\n\r\n\r\n/**\r\n * Erlang distribution implementation based on A.Law \"Simulation Modelling and Analysis\", 5e, Mc Graw-Hill, 2015, p. 453\r\n * @param k shape parameter, k = 1,2,3,...\r\n * @param beta scale parameter, beta > 0, beta = 1/lambda. For Erlang distribution beta is equal to the mean value.\r\n * @returns Erlang distributed random value\r\n */\r\nexport function Erlang(k, beta) {\r\n\tif (k == null) k = 1;\r\n\tif (beta == null) beta = 1.0;\r\n\tvar m = k | 0;\r\n\tif (beta <= 0 || m <= 0) return NaN;\r\n\tvar mult = 1.0;\r\n\tfor (var i=0;i<m;i++) {\r\n\t\tmult *= Math.random();\r\n\t}\r\n    return -beta/m*Math.log(mult);\r\n}\r\n\r\n\r\n/**\r\n * Triangular distribution implementation\r\n * @param a left side\r\n * @param b right side, b >= a\r\n * @param m triangle peak (mode), a <= m <= b\r\n * @returns Triangular distributed random value\r\n */\r\nexport function Triangular(a, b, m) {\r\n    if (a == null) a = 0.0;\r\n    if (b == null) b = 1.0;\r\n    if (m == null) m = 0.5;\r\n    if (a>b || m < a || m > b) return NaN;\r\n\tif (a==b) return a;\r\n    var c = (m - a) / (b - a);\r\n    var p = Math.random();\r\n    if (p <= c) {\r\n        return a + Math.sqrt(p * (b - a) * (m - a));\r\n    } else {\r\n        return b - Math.sqrt((1 - p) * (b - a) * (b - m));\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * Trapezoidal distribution implementation\r\n * @param a left side\r\n * @param b right side, b >= a\r\n * @param c left trapezoid peak (mode)\r\n * @param d right trapezoid peak (mode), a <= c <= d <= b\r\n * @returns Trapezoidal distributed random value\r\n */\r\nexport function Trapezoidal(a, b, c, d) {\r\n    if (a == null) a = 0.0;\r\n    if (b == null) b = 1.0;\r\n    if (c == null) c = 0.25;\r\n    if (d == null) d = 0.75;\r\n    if (a > b || c < a || c > d || d > b) return NaN;\r\n\tif (a==b) return a;\r\n    var p1 = (c - a) / ( (b - a)+(d - c));\r\n    var p2 = (b - d) / ( (b - a)+(d - c));\r\n    var p = Math.random();\r\n    \r\n    if (p <= p1) {\r\n        return a + Math.sqrt(p * ((b - a)+(d - c)) * (c - a) );\r\n    } else if (p > 1-p2) {\r\n        return b - Math.sqrt((1 - p) * ((b - a)+(d - c)) * (b - d));\r\n    } else {\r\n    \treturn c + (d-c)*(p-p1)/(1.0 - p1 - p2);\r\n    }\r\n}\r\n\r\n/**\r\n * Lognormal distribution implementation based on A.Law \"Simulation Modelling and Analysis\", 5e, Mc Graw-Hill, 2015, p. 458\r\n * @param mean mean value\r\n * @param std standard deviation\r\n * @returns Lognormally distributed random value\r\n */\r\nexport function LogNormal(mean, std) {\r\n    if (mean == null) mean = 0.0;\r\n    if (std == null) std = 1.0;\r\n    if (std < 0) return NaN;\r\n    return Math.exp(Normal(mean, std))\r\n}\r\n\r\n\r\n\r\n/**\r\n * Bernoulli distribution implementation based on A.Law \"Simulation Modelling and Analysis\", 5e, Mc Graw-Hill, 2015, p. 464\r\n * @param p probability of 1\r\n * @returns Bernoulli distributed random value (zero or one)\r\n */\r\nexport function Bernoulli(p) {\r\n\tif (p==null) p = 0.5;\r\n\tif (p<0.0 | p > 1.0) return NaN;\r\n    if (Math.random()<=p)\r\n    \treturn 1;\r\n    else \r\n    \treturn 0;\r\n}\r\n\r\n\r\n/**\r\n * Binomial distribution implementation based on A.Law \"Simulation Modelling and Analysis\", 5e, Mc Graw-Hill, 2015, p. 469\r\n * @param n number of trials\r\n * @param p success probability in each trial\r\n * @returns Binomial distributed random value (0,1,...,n)\r\n */\r\nexport function Binomial(n,p) {\r\n\tif (n==null) n = 1;\r\n\tif (p==null) p = 0.5;\t\r\n\tvar t = n | 0;\r\n\tif ( p < 0.0 | p > 1.0 | t <= 0) return NaN;\r\n\tvar sum = 0;\r\n\tfor (var i=0;i<t;i++) {\r\n\t\tsum += Bernoulli(p);\r\n\t}\r\n    return sum;\r\n}\r\n\r\n/**\r\n * Geometric distribution implementation based on A.Law \"Simulation Modelling and Analysis\", 5e, Mc Graw-Hill, 2015, p. 469\r\n * @param p success probability \r\n * @returns Geometric distributed random value \r\n */\r\nexport function Geometric(p) {\r\n\tif (p==null) p = 0.5;\t\r\n\tif ( p <= 0.0 | p >= 1.0 ) return NaN;\t\r\n    return Math.floor(Math.log(Math.random())/Math.log(1-p) ) | 0;\r\n}\r\n\r\n/**\r\n * Poisson distribution implementation based on A.Law \"Simulation Modelling and Analysis\", 5e, Mc Graw-Hill, 2015, p. 470\r\n * @param lambda mean value \r\n * @returns Poisson distributed random value \r\n */\r\nexport function Poisson(lambda) {\r\n\tif (lambda==null) lambda = 1.0;\t\r\n\tif ( lambda <= 0.0 ) return NaN;\t\r\n\tvar a = Math.exp(-lambda);\r\n\tvar b = 1.0;\r\n\tvar i = 0;\t\r\n\twhile (true) {\r\n\t\tvar u = Math.random();\r\n\t\tb *= u;\r\n\t\tif (b < a) return i;\r\n\t\ti += 1;\r\n\t}\r\n}\r\n\r\n/**\r\n * Gamma distribution implementation.\r\n * This code has been copied from\r\n * https://github.com/btelles/simjs-updated/\r\n * simjs-updated is licensed under MIT Open Source License termns \r\n * @param alpha shape parameter\r\n * @param beta rate parameter \r\n * @returns Gamma distributed random value.\r\n */\r\nexport function Gamma(alpha, beta) {\r\n\tif (alpha == null) alpha = 1.0;\r\n\tif (beta == null) beta = 1.0;\r\n    if (alpha > 1.0) {\r\n        let ainv = Math.sqrt(2.0 * alpha - 1.0),\r\n            bbb = alpha - Math.log(4.0),\r\n            ccc = alpha + ainv;\r\n\r\n        while (true) {  // eslint-disable-line no-constant-condition\r\n            let u1 = random();\r\n\r\n            if ((u1 < 1e-7) || (u > 0.9999999)) {\r\n                continue;\r\n            }\r\n            let u2 = 1.0 - random(),\r\n                v = Math.log(u1 / (1.0 - u1)) / ainv,\r\n                x = alpha * Math.exp(v),\r\n                z = u1 * u1 * u2,\r\n                r = bbb + ccc * v - x;\r\n            if ((r + Math.log(4.5) - 3.5 * z >= 0.0) || (r >= Math.log(z))) {\r\n                return x * beta;\r\n            }\r\n        }\r\n    } else if (alpha == 1.0) {\r\n        let u = random();\r\n        while (u <= 1e-7) {\r\n            u = random();\r\n        }\r\n        return -Math.log(u) * beta;\r\n    } else {\r\n        let x;\r\n        while (true) {\r\n            let u = random(),\r\n                b = (Math.E + alpha) / Math.E,\r\n                p = b * u;\r\n            if (p <= 1.0) {\r\n                x = Math.pow(p, 1.0 / alpha);\r\n            } else {\r\n                x = -Math.log((b - p) / alpha);\r\n            }\r\n            const u1 = random();\r\n\r\n            if (p > 1.0) {\r\n                if (u1 <= Math.pow(x, (alpha - 1.0))) {\r\n                    break;\r\n                }\r\n            } else if (u1 <= Math.exp(-x)) {\r\n                break;\r\n            }\r\n        }\r\n        return x * beta;\r\n    }\r\n}\r\n","export * from './src/sd-random';\r\n"]}